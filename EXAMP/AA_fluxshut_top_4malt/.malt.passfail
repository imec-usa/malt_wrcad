
*.malt.passfail: called by .malt.binsearch
.control

*node names, envelope values, and step values contained in envelope file
*the envelope file is sourced just once, in binsearch

$pname
if ($#param = 1)
  $param
end
source $circuit
failed=0

*conserve memory
save $node_name
*step through time
step_index = 0
step_total = 0
dowhile (step_index < length(step_value)) and failed=0
  step $&step_value[$&step_index]
  step_total_old = step_total
  step_total     = step_total+$&step_value[$&step_index]

  *echo step index: $&step_index

  *step through list of nodes to check
  node_index = 0
  dowhile node_index < $#node_name
    if ($node_name[$&node_index]) > ($node_hi[$&node_index])[0,length($node_name[$&node_index])-1]
      failed=1
      echo Node $node_name[$&node_index] failed hi envelope. Time step in range $&step_total_old - $&(step_total-1)
    end
    if ($node_name[$&node_index]) < ($node_lo[$&node_index])[0,length($node_name[$&node_index])-1]
      failed=1
      echo Node $node_name[$&node_index] failed lo envelope. Time step in range $&step_total_old - $&(step_total-1)
    end
    node_index=node_index+1
  end
  step_index=step_index+1
end

*execute manual passfail file
if (failed = 0) and ($#passf = 1)
  $passf
end

*trace marginal vectors
if dasht=1 or dasht=3
  if failed=1
    * complete the simulation
    while (step_index < length(step_value))
      step $&step_value[$&step_index]
      step_index=step_index+1
    end
  end
endif
if dasht=1
  write $n_return $node_name
endif
if dasht=3
  if failed=1 or pegged=2
    write $f_return $node_name
  else
    write $p_return $node_name
  end
end

free $node_name yes

.endc
.end
