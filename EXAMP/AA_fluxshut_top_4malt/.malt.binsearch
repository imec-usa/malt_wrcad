
*.malt.binsearch: called by *.call
*find the operating boundary between the two points pc and po
*if accuracy=0, see if pc parameter set is pass or fail
.control

*add codeblocks: these will have multiple accesses
*can $circuit be a codeblock?
codeblock $pname -a
if ($#param == 1)
  codeblock $param -a
end
if ($#passf == 1)
  codeblock $passf -a
end
codeblock .malt.passfail -a

source $envelope
pegged=0

*open the return file
echo > $return

*check inner point...except for corners
param=pc
if dashc == 1
  failed=0
else
  .malt.passfail
end
echo $&failed >> $return

* nominal vectors
if dasht == 1
  dasht = 2
endif

*if we failed, or if we are doing a point-check, bailout
*po[0]=0 only for point-check

*check outer point
if (failed == 0 and po[0] <> 0)
  param=po
  .malt.passfail

*find margin
  if failed == 0
    pegged=1
  else
    *this conditional-hack prevents division by zero for the case of pl == 0
    *all because we are doing vector math
    deltal=sqrt(((pl == 1)*po+(pl == 0))/((pl == 1)*pc+(pl == 0)))
    delta =0.5*(po-pc)
    param=(pl == 0)*(param-delta) + (pl == 1)*(param/deltal)
    while (delta[0] > 1)
      deltal=sqrt(deltal)
      delta =0.5*delta
      .malt.passfail
      if failed=1
        param=(pl == 0)*(param-delta) + (pl == 1)*(param/deltal)
      else
        param=(pl == 0)*(param+delta) + (pl == 1)*(param*deltal)
      end
    end
  end
  echo $&param >> $return

  *trace marginal vectors
  if dasht == 1 or dasht == 2
    dasht=3
    * margin point might pass or fail
    .malt.passfail
    if pegged == 0
      if failed == 1
        param=(pl == 0)*(param-delta) + (pl == 1)*(param/deltal)
      else
        param=(pl == 0)*(param+delta) + (pl == 1)*(param*deltal)
      end
    end
    * this point ought to be the opposite (fail or pass)
    if pegged == 1
      pegged=2
    end
    .malt.passfail
  end

end
set noaskquit
quit

.endc
